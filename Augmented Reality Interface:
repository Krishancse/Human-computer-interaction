Creating a complete Augmented Reality (AR) interface involves more than can be covered in a single response, especially when combining it with Human-Computer Interaction (HCI) principles.
However, I'll provide a simplified example using Java and ARCore for Android. This example will involve displaying a 3D model in an AR environment and interacting with it through a tap gesture.

Please note that building a full AR application is more complex and might require additional considerations, especially regarding HCI principles.

**Step 1: Set Up Your Environment**

1. Install Android Studio.
2. Create a new Android project with AR support using ARCore.

**Step 2: Import 3D Model**

1. Obtain a 3D model in a compatible format (such as `.obj` or `.gltf`).
2. Place the model in the `assets` folder of your Android project.

**Step 3: Implement AR Interface in Java**

```java
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.widget.Toast;
import com.google.ar.core.Anchor;
import com.google.ar.core.HitResult;
import com.google.ar.core.Plane;
import com.google.ar.sceneform.AnchorNode;
import com.google.ar.sceneform.assets.RenderableSource;
import com.google.ar.sceneform.rendering.ModelRenderable;
import com.google.ar.sceneform.ux.ArFragment;
import com.google.ar.sceneform.ux.BaseArFragment;
import com.google.ar.sceneform.ux.TapGestureDetector;

public class MainActivity extends AppCompatActivity {

    private ArFragment arFragment;
    private GestureDetector gestureDetector;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        arFragment = (ArFragment) getSupportFragmentManager().findFragmentById(R.id.arFragment);

        // Set up tap gesture detector
        gestureDetector = new GestureDetector(this, new TapGestureDetector());

        // Load 3D model
        ModelRenderable.builder()
            .setSource(
                this,
                RenderableSource.builder().setSource(
                    this,
                    Uri.parse("model_path/model.gltf"),
                    RenderableSource.SourceType.GLB)
                    .setScale(0.5f) // Adjust the scale of the model
                    .build())
            .setRegistryId("model")
            .build()
            .thenAccept(renderable -> arFragment.setOnTapArPlaneListener((hitResult, plane, motionEvent) -> {
                if (plane.getType() != Plane.Type.HORIZONTAL_UPWARD_FACING) {
                    return;
                }

                // Create anchor and anchor node
                Anchor anchor = hitResult.createAnchor();
                AnchorNode anchorNode = new AnchorNode(anchor);
                anchorNode.setParent(arFragment.getArSceneView().getScene());

                // Attach the 3D model to the anchor node
                TransformableNode model = new TransformableNode(arFragment.getTransformationSystem());
                model.setParent(anchorNode);
                model.setRenderable(renderable);
                model.select();
            }))
            .exceptionally(throwable -> {
                Toast.makeText(this, "Error loading model", Toast.LENGTH_SHORT).show();
                return null;
            });
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        return gestureDetector.onTouchEvent(event) || super.onTouchEvent(event);
    }

    private class TapGestureDetector extends GestureDetector.SimpleOnGestureListener {
        @Override
        public boolean onSingleTapUp(MotionEvent e) {
            // Handle single tap interactions here
            return true;
        }
    }
}
```

Please note that this code provides a basic example and simplifies many aspects, including user interaction and HCI considerations. 
Creating a comprehensive AR interface involves handling more complex interactions, optimizing for user experience, and possibly integrating features like voice commands.
